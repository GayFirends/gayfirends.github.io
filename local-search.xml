<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在K8S上搭建Kuboard面板</title>
    <link href="/2023/06/19/kuboard/"/>
    <url>/2023/06/19/kuboard/</url>
    
    <content type="html"><![CDATA[<p>上次我们搭建了K8S的dashboard，然后近期我在上课的时候发现了一个叫做kuboard的项目，是一个K8S的管理面板，比官方的dashboard要好用（主要是有中文！！！），废话不多说我们直接搞起！</p><h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><h2 id="1）开启已经搭建好的K8S虚拟机"><a href="#1）开启已经搭建好的K8S虚拟机" class="headerlink" title="1）开启已经搭建好的K8S虚拟机"></a>1）开启已经搭建好的K8S虚拟机</h2><p>  目前我这边使用的是主节点+一台单节点集群。</p><h2 id="2）使用hostPath持久化方案安装kuboard"><a href="#2）使用hostPath持久化方案安装kuboard" class="headerlink" title="2）使用hostPath持久化方案安装kuboard"></a>2）使用hostPath持久化方案安装kuboard</h2><p>​运行如下命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run -d \<br>  --restart=unless-stopped \<br>  --name=kuboard \<br>  -p 80:80/tcp \<br>  -p 10081:10081/tcp \<br>  -e KUBOARD_ENDPOINT=<span class="hljs-string">&quot;http://内网IP:80&quot;</span> \<br>  -e KUBOARD_AGENT_SERVER_TCP_PORT=<span class="hljs-string">&quot;10081&quot;</span> \<br>  -v /root/kuboard-data:/data \<br>  swr.cn-east-2.myhuaweicloud.com/kuboard/kuboard:v3<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/19/BgRHI1na7yYrX2A.png" alt="image-20230619212726679"></p><h2 id="3）访问Kuboard"><a href="#3）访问Kuboard" class="headerlink" title="3）访问Kuboard"></a>3）访问Kuboard</h2><ul><li>在浏览器中打开链接 <code>http://your-node-ip-address:80</code></li><li>输入初始用户名和密码，并登录<ul><li>用户名： <code>admin</code></li><li>密码： <code>Kuboard123</code><img src="https://s2.loli.net/2023/06/19/pYa4wt3Ub7zm6Gq.png" alt="image-20230619213027603"></li></ul></li></ul><h2 id="4）添加集群"><a href="#4）添加集群" class="headerlink" title="4）添加集群"></a>4）添加集群</h2><p>单击添加集群–&gt;选择agent然后按照如下设置：</p><p><img src="https://s2.loli.net/2023/06/19/y8mSQ1NbWCBit69.png" alt="image-20230619213309803"></p><p>注意：务必选择<img src="https://s2.loli.net/2023/06/19/ojZQD7cUIG9JNkl.png" alt="image-20230619213327815">此镜像，因为Dokcer官方镜像库目前在中国大陆无法正常使用，所以选择此选项。</p><p>然后根据提示在终端输入如下命令：<img src="https://s2.loli.net/2023/06/19/qmyakEuDNSov4wT.png" alt="image-20230619214129605"></p><p><img src="https://s2.loli.net/2023/06/19/4FWVtfSOZpEmJkG.png" alt="image-20230619214157364"></p><h1 id="5）结束"><a href="#5）结束" class="headerlink" title="5）结束"></a>5）结束</h1><p><img src="https://s2.loli.net/2023/06/19/ZKzYaCtiBLV42n7.png" alt="image-20230619214246582"></p><p>这样就搭建完成了！接下来我会慢慢更新关于k8s的内容，如有纰漏，麻烦在评论区指出，谢谢！</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
      <tag>k8s</tag>
      
      <tag>面板</tag>
      
      <tag>kuboard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【私有云】Kubernetes（k8s）部署指南（v1.24.12）_</title>
    <link href="/2023/05/13/k8s-install-guide/"/>
    <url>/2023/05/13/k8s-install-guide/</url>
    
    <content type="html"><![CDATA[<p>阅读本篇文章时您可能需要如下技能：</p><p>1.基础的Linux技能</p><p>2.基础的docker技能</p><p>3.基础的文档日志查找能力</p><p>4.一个会用百度谷歌等搜索引擎的技能</p><h1 id="一、基础环境部署"><a href="#一、基础环境部署" class="headerlink" title="一、基础环境部署"></a>一、基础环境部署</h1><h2 id="1）前期准备（所有节点）"><a href="#1）前期准备（所有节点）" class="headerlink" title="1）前期准备（所有节点）"></a>1）前期准备（所有节点）</h2><h3 id="1、修改主机名并配置hosts"><a href="#1、修改主机名并配置hosts" class="headerlink" title="1、修改主机名并配置hosts"></a>1、修改主机名并配置hosts</h3><p>修改master节点与node节点的主机名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-comment"># 在master节点上执行</span><br>hostnamectl set-hostname k8s-master<br><span class="hljs-comment"># 在node节点上执行</span><br>hostnamectl set-hostname k8s-node<br></code></pre></td></tr></table></figure><p>配置hosts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-comment"># 请将ip修改为自己的ip</span><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/hosts&lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">192.168.10.100 k8s-master</span><br><span class="hljs-string">192.168.10.200 k8s-node1</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="2、配置ssh免密访问"><a href="#2、配置ssh免密访问" class="headerlink" title="2、配置ssh免密访问"></a>2、配置ssh免密访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-comment"># 直接一直回车就行</span><br>ssh-keygen<br><br>ssh-copy-id -i ~/.ssh/id_rsa.pub root@k8s-master<br>ssh-copy-id -i ~/.ssh/id_rsa.pub root@k8s-node1<br></code></pre></td></tr></table></figure><h3 id="3、关闭防火墙"><a href="#3、关闭防火墙" class="headerlink" title="3、关闭防火墙"></a>3、关闭防火墙</h3><p>注意：如果您是在公网环境下搭建k8s建议开启防火墙并通过指定开放端口以确保服务器安全性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">systemctl stop firewalld<br>systemctl <span class="hljs-built_in">disable</span> firewalld<br></code></pre></td></tr></table></figure><h3 id="4、关闭swap"><a href="#4、关闭swap" class="headerlink" title="4、关闭swap"></a>4、关闭swap</h3><blockquote><p>官方文档中建议将swap关闭以提高系统稳定性和系统运行性能</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-comment"># 临时关闭；关闭swap主要是为了性能考虑</span><br>swapoff -a<br><span class="hljs-comment"># 可以通过这个命令查看swap是否关闭了</span><br>free<br><span class="hljs-comment"># 永久关闭        </span><br>sed -ri <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab<br></code></pre></td></tr></table></figure><h3 id="5、禁用selinux"><a href="#5、禁用selinux" class="headerlink" title="5、禁用selinux"></a>5、禁用selinux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-comment"># 临时关闭</span><br>setenforce 0<br><span class="hljs-comment"># 永久禁用</span><br>sed -i <span class="hljs-string">&#x27;s/^SELINUX=enforcing$/SELINUX=disabled/&#x27;</span> /etc/selinux/config<br></code></pre></td></tr></table></figure><h3 id="6、允许iptables检查桥接流量（可选）"><a href="#6、允许iptables检查桥接流量（可选）" class="headerlink" title="6、允许iptables检查桥接流量（可选）"></a>6、允许iptables检查桥接流量（可选）</h3><p>若要显式加载此模块，请运行 <code>sudo modprobe br_netfilter</code>，通过运行 <code>lsmod | grep br_netfilter</code> 来验证 br_netfilter 模块是否已加载，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">sudo modprobe br_netfilter<br>lsmod | grep br_netfilter<br></code></pre></td></tr></table></figure><p>为了让 Linux 节点的 iptables 能够正确查看桥接流量，请确认 sysctl 配置中的 <code>net.bridge.bridge-nf-call-iptables</code> 设置为 1。 例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">overlay</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><br>sudo modprobe overlay<br>sudo modprobe br_netfilter<br><br><span class="hljs-comment"># 设置所需的 sysctl 参数，参数在重新启动后保持不变</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.ipv4.ip_forward                 = 1</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 应用 sysctl 参数而不重新启动</span><br>sudo sysctl --system<br></code></pre></td></tr></table></figure><h2 id="2）安装docker（所有节点）"><a href="#2）安装docker（所有节点）" class="headerlink" title="2）安装docker（所有节点）"></a>2）安装docker（所有节点）</h2><blockquote><p>v1.24 之前的 Kubernetes 版本包括与 Docker Engine 的直接集成，使用名为 dockershim 的组件。 这种特殊的直接整合不再是 Kubernetes 的一部分 （这次删除被作为 v1.20 发行版本的一部分宣布）。 你可以阅读检查 Dockershim 弃用是否会影响你 以了解此删除可能会如何影响你。 要了解如何使用 dockershim 进行迁移，请参阅<a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/migrating-from-dockershim/">从 dockershim 迁移</a>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-comment"># 安装yum配置工具</span><br>yum install -y yum-utils<br><span class="hljs-comment"># 配置yum源</span><br>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><span class="hljs-comment"># 安装docker-ce版本</span><br>yum install -y docker-ce<br><span class="hljs-comment"># 启动</span><br>systemctl start docker<br><span class="hljs-comment"># 开机自启</span><br>systemctl <span class="hljs-built_in">enable</span> docker<br><br><br><span class="hljs-comment"># Docker镜像源设置</span><br><span class="hljs-comment"># 修改文件 /etc/docker/daemon.json，没有这个文件就创建</span><br><span class="hljs-comment"># 添加以下内容后，重启docker服务：</span><br><span class="hljs-built_in">cat</span> &gt;/etc/docker/daemon.json&lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">   &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment"># 加载与重启docker</span><br>systemctl reload docker &amp;&amp; systemctl restart docker<br><span class="hljs-comment"># 查看</span><br>systemctl status docker containerd<br></code></pre></td></tr></table></figure><h2 id="5）配置k8s-yum-源（所有节点）"><a href="#5）配置k8s-yum-源（所有节点）" class="headerlink" title="5）配置k8s yum 源（所有节点）"></a>5）配置k8s yum 源（所有节点）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-built_in">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[k8s]</span><br><span class="hljs-string">name=k8s</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=0</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="6）将-sandbox-image-镜像源设置为阿里云google-containers镜像源（所有节点）"><a href="#6）将-sandbox-image-镜像源设置为阿里云google-containers镜像源（所有节点）" class="headerlink" title="6）将 sandbox_image 镜像源设置为阿里云google_containers镜像源（所有节点）"></a>6）将 sandbox_image 镜像源设置为阿里云google_containers镜像源（所有节点）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-comment"># 导出默认配置，config.toml这个文件默认是不存在的</span><br>containerd config default &gt; /etc/containerd/config.toml<br>grep sandbox_image  /etc/containerd/config.toml<br>sed -i <span class="hljs-string">&quot;s#registry.k8s.io/pause#registry.aliyuncs.com/google_containers/pause#g&quot;</span>       /etc/containerd/config.toml<br>grep sandbox_image  /etc/containerd/config.toml<br></code></pre></td></tr></table></figure><h2 id="7-配置containerd-cgroup-驱动程序-systemd（所有节点）"><a href="#7-配置containerd-cgroup-驱动程序-systemd（所有节点）" class="headerlink" title="7)配置containerd cgroup 驱动程序 systemd（所有节点）"></a>7)配置containerd cgroup 驱动程序 systemd（所有节点）</h2><blockquote><p>kubernets自ｖ1.24.0后，就不再使用docker.shim，替换采用containerd作为容器运行时端点。因此需要安装containerd（在docker的基础下安装），上面安装docker的时候就自动安装了containerd了。这里的docker只是作为客户端而已。容器引擎还是containerd。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs BASH">sed -i <span class="hljs-string">&#x27;s#SystemdCgroup = false#SystemdCgroup = true#g&#x27;</span> /etc/containerd/config.toml<br><span class="hljs-comment"># 应用所有更改后,重新启动containerd</span><br>systemctl restart containerd<br></code></pre></td></tr></table></figure><h2 id="8）开始安装kubeadm、kubelet、kubectl（master节点）"><a href="#8）开始安装kubeadm、kubelet、kubectl（master节点）" class="headerlink" title="8）开始安装kubeadm、kubelet、kubectl（master节点）"></a>8）开始安装kubeadm、kubelet、kubectl（master节点）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-comment"># 不指定版本就是最新版本</span><br>yum install -y kubelet-1.24.12 kubeadm-1.24.12  kubectl-1.24.12 --disableexcludes=kubernetes<br><span class="hljs-comment"># disableexcludes=kubernetes：禁掉除了这个kubernetes之外的别的仓库</span><br><span class="hljs-comment"># 设置为开机自启并现在立刻启动服务 --now：立刻启动服务</span><br>systemctl <span class="hljs-built_in">enable</span> --now kubelet<br><br><span class="hljs-comment"># 查看状态，这里需要等待一段时间再查看服务状态，启动会有点慢</span><br>systemctl status kubelet<br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">kubectl version<br>yum info kubeadm<br></code></pre></td></tr></table></figure><h2 id="9-使用-kubeadm-初始化集群（master节点"><a href="#9-使用-kubeadm-初始化集群（master节点" class="headerlink" title="9)使用 kubeadm 初始化集群（master节点)"></a>9)使用 kubeadm 初始化集群（master节点)</h2><h3 id="1、运行如下命令生成配置文件"><a href="#1、运行如下命令生成配置文件" class="headerlink" title="1、运行如下命令生成配置文件"></a>1、运行如下命令生成配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">kubeadm config <span class="hljs-built_in">print</span> init-defaults &gt; kubeadm-init.yaml<br></code></pre></td></tr></table></figure><h3 id="2、修改-kubeadm-init-yaml"><a href="#2、修改-kubeadm-init-yaml" class="headerlink" title="2、修改 kubeadm-init.yaml"></a>2、修改 kubeadm-init.yaml</h3><p>该文件有三处需要修改:</p><ul><li>将<code>advertiseAddress: 1.2.3.4</code>修改为本机地址</li><li>将<code>imageRepository: k8s.gcr.io</code>修改为<code>imageRepository:registry.aliyuncs.com/google_containers</code></li><li>将<code>kubernetesVersion: 1.24.0</code>修改为<code>kubernetesVersion: 1.24.12</code></li><li>添加 <code>podSubnet: &quot;10.244.0.0/16&quot;</code></li></ul><p>修改完成的文件如下</p><p><a href="https://s2.loli.net/2023/03/31/omLfdOU9V6HrnuQ.png"><img src="https://s2.loli.net/2023/03/31/omLfdOU9V6HrnuQ.png" alt="初始化脚本"></a></p><h3 id="3、下载镜像"><a href="#3、下载镜像" class="headerlink" title="3、下载镜像"></a>3、下载镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">kubeadm config images pull --config kubeadm-init.yaml<br></code></pre></td></tr></table></figure><h3 id="4、开始初始化"><a href="#4、开始初始化" class="headerlink" title="4、开始初始化"></a>4、开始初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">kubeadm init --config kubeadm-init.yaml<br></code></pre></td></tr></table></figure><h3 id="5、初始化完成"><a href="#5、初始化完成" class="headerlink" title="5、初始化完成"></a>5、初始化完成</h3><p>初始化完成后会有一个提示</p><p><a href="https://s2.loli.net/2023/03/31/IYft2K9PQdRxmbn.png"><img src="https://s2.loli.net/2023/03/31/IYft2K9PQdRxmbn.png" alt="image-20230331140633606"></a></p><p>将这行命令保存下来，备用</p><h3 id="6、配置环境变量"><a href="#6、配置环境变量" class="headerlink" title="6、配置环境变量"></a>6、配置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br><br><span class="hljs-comment"># 临时生效（退出当前窗口重连环境变量失效）</span><br><span class="hljs-built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf<br><span class="hljs-comment"># 永久生效（推荐）</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot;</span> &gt;&gt; ~/.bash_profile<br><span class="hljs-built_in">source</span>  ~/.bash_profile<br><br></code></pre></td></tr></table></figure><h2 id="10）配置网络插件"><a href="#10）配置网络插件" class="headerlink" title="10）配置网络插件"></a>10）配置网络插件</h2><blockquote><p>你必须部署一个基于 Pod 网络插件的 容器网络接口 (CNI)，以便你的 Pod 可以相互通信。</p></blockquote><p>首先下载flannel的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">curl https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br><br></code></pre></td></tr></table></figure><p>然后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">kubectl apply -f kube-flannel.yml<br></code></pre></td></tr></table></figure><p>查看节点状态</p><p><a href="https://s2.loli.net/2023/03/31/UAuMT819CYwBF7p.png"><img src="https://s2.loli.net/2023/03/31/UAuMT819CYwBF7p.png" alt="image-20230331174959406"></a></p><p>这个时候节点状态就已经准备完成了</p><h2 id="11）node节点加入集群"><a href="#11）node节点加入集群" class="headerlink" title="11）node节点加入集群"></a>11）node节点加入集群</h2><p>先安装kubelet</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs BASH">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes<br><span class="hljs-comment"># 设置为开机自启并现在立刻启动服务 --now：立刻启动服务</span><br>systemctl <span class="hljs-built_in">enable</span> --now kubelet<br>systemctl status kubelet<br></code></pre></td></tr></table></figure><p>如果没有令牌，可以通过在控制平面节点上运行以下命令来获取令牌：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">kubeadm token list<br><br></code></pre></td></tr></table></figure><p>默认情况下，<code>令牌会在24小时后过期</code>。如果要在当前令牌过期后将节点加入集群， 则可以通过在控制平面节点上运行以下命令来创建新令牌：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs BASH">kubeadm token create<br><span class="hljs-comment"># 再查看</span><br>kubeadm token list<br><br></code></pre></td></tr></table></figure><p>如果你没有 <code>–discovery-token-ca-cert-hash</code> 的值，则可以通过在控制平面节点上执行以下命令链来获取它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">openssl x509 -pubkey -<span class="hljs-keyword">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed <span class="hljs-string">&#x27;s/^.* //&#x27;</span><br><br></code></pre></td></tr></table></figure><p>如果执行kubeadm init时没有记录下加入集群的命令，可以通过以下命令重新创建<code>（推荐）</code>一般不用上面的分别获取token和ca-cert-hash方式，执行以下命令一气呵成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">kubeadm token create --print-join-command<br><br></code></pre></td></tr></table></figure><p>这里需要等待一段时间，再查看节点节点状态，因为需要安装kube-proxy和flannel。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs BASH">kubectl get pods -A<br>kubectl get nodes<br><br></code></pre></td></tr></table></figure><p><a href="https://s2.loli.net/2023/03/31/VSJ1scq3t96KTLP.png"><img src="https://s2.loli.net/2023/03/31/VSJ1scq3t96KTLP.png" alt="查看pod"></a></p><p>查看pod</p><p><a href="https://s2.loli.net/2023/03/31/syjgzJLbK8ux2WG.png"><img src="https://s2.loli.net/2023/03/31/syjgzJLbK8ux2WG.png" alt="节点"></a></p><p>节点</p><h1 id="二、搭建部署Dashboard"><a href="#二、搭建部署Dashboard" class="headerlink" title="二、搭建部署Dashboard"></a>二、搭建部署Dashboard</h1><h2 id="1）部署"><a href="#1）部署" class="headerlink" title="1）部署"></a>1）部署</h2><p>在master节点上输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.1/aio/deploy/recommended.yaml<br><br></code></pre></td></tr></table></figure><p>部署成功之后，可以看到 kubernetes-dashboard 相关的两个pod：<a href="https://s2.loli.net/2023/03/31/UxY7Z9KfluaJt8S.png"><img src="https://s2.loli.net/2023/03/31/UxY7Z9KfluaJt8S.png" alt="dashboard pod"></a></p><p>和 kubernetes-dashboard 相关的两个service：<a href="https://s2.loli.net/2023/03/31/PpvygGjBKNQa9fD.png"><img src="https://s2.loli.net/2023/03/31/PpvygGjBKNQa9fD.png" alt="dashboard services"></a></p><h2 id="2）获取Token"><a href="#2）获取Token" class="headerlink" title="2）获取Token"></a>2）获取Token</h2><p>根据<a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md">dashboard&#x2F;creating-sample-user.md at master · kubernetes&#x2F;dashboard (github.com)</a>来创建示例账号。</p><p>创建一个服务角色</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><br><br></code></pre></td></tr></table></figure><p>保存到admin-user.yaml。</p><p>在创建一个角色绑定</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><br></code></pre></td></tr></table></figure><p>保存到clusterrolebinding.yaml。</p><p>然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">kubectl -n kubernetes-dashboard create token admin-user<br><br></code></pre></td></tr></table></figure><p>来获取token 复制下来。</p><h2 id="3）修改为NodePort"><a href="#3）修改为NodePort" class="headerlink" title="3）修改为NodePort"></a>3）修改为NodePort</h2><p>执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">kubectl -n kubernetes-dashboard edit service kubernetes-dashboard<br><br></code></pre></td></tr></table></figure><p>修改 <code>type: ClusterIP</code> 为 <code>type: NodePort</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-string">...</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">resourceVersion:</span> <span class="hljs-string">&quot;343478&quot;</span><br>  <span class="hljs-attr">selfLink:</span> <span class="hljs-string">/api/v1/namespaces/kubernetes-dashboard/services/kubernetes-dashboard</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">8e48f478-993d-11e7-87e0-901b0e532516</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-number">10.100</span><span class="hljs-number">.124</span><span class="hljs-number">.90</span><br>  <span class="hljs-attr">externalTrafficPolicy:</span> <span class="hljs-string">Cluster</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br><br></code></pre></td></tr></table></figure><p>看一下具体分配的 node port 是哪个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs BASH">$ kubectl -n kubernetes-dashboard get service kubernetes-dashboard<br>NAME                   TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)         AGE<br>kubernetes-dashboard   NodePort   10.106.3.227   &lt;none&gt;        443:32212/TCP   9h<br><br></code></pre></td></tr></table></figure><p>可以看到这里分配的是 32212 端口。</p><p>然后通过nodeip:即可访问了</p><p><a href="https://s2.loli.net/2023/03/31/Z6VkYycI5FAhe13.png"><img src="https://s2.loli.net/2023/03/31/Z6VkYycI5FAhe13.png" alt="dashboard登录"></a></p><p>dashboard登录</p><p><a href="https://s2.loli.net/2023/03/31/nbgqcdD5QAIixGu.png"><img src="https://s2.loli.net/2023/03/31/nbgqcdD5QAIixGu.png" alt="完事"></a></p><p>完事</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><p>[1]: <a href="https://www.cnblogs.com/liugp/p/16614645.html">https://www.cnblogs.com/liugp/p/16614645.html</a> “【云原生】Kubernetes（k8s）最新版最完整版环境部署+master高可用实现（k8sV1.24.1+dashboard+harbor）”<br>[2]: <a href="https://skyao.io/learning-kubernetes/docs/installation/kubeadm/dashboard.html">https://skyao.io/learning-kubernetes/docs/installation/kubeadm/dashboard.html</a> “部署并访问Dashboard”<br>[3]: <a href="https://kubernetes.io/zh-cn/docs">https://kubernetes.io/zh-cn/docs</a> “K8S官方文档”</p>]]></content>
    
    
    
    <tags>
      
      <tag>K8S</tag>
      
      <tag>linux</tag>
      
      <tag>Kubernetes</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
